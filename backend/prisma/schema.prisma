generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model News {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  content         String    @db.Text
  htmlContent     String?   @db.LongText
  media           Json
  cover           String?   @db.Text
  isVisible       Boolean   @default(true)
  customCss       String?   @db.LongText
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  authorId        Int?
  categoryId      Int?
  excerpt         String?   @db.Text
  isPinned        Boolean   @default(false)
  metaDescription String?   @db.Text
  metaTitle       String?   @db.VarChar(255)
  publishedAt     DateTime?
  slug            String?   @unique @db.VarChar(255)
  viewCount       Int       @default(0)
  author          User?     @relation(fields: [authorId], references: [id])
  category        Category? @relation(fields: [categoryId], references: [id])
  tags            NewsTag[]

  @@index([categoryId])
  @@index([authorId])
  @@index([publishedAt])
  @@index([slug])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  slug        String   @unique @db.VarChar(100)
  color       String?  @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  isVisible   Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  news        News[]
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  slug        String    @unique @db.VarChar(50)
  color       String?   @db.VarChar(7)
  description String?   @db.Text
  isVisible   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  news        NewsTag[]
}

model NewsTag {
  id     Int  @id @default(autoincrement())
  newsId Int
  tagId  Int
  news   News @relation(fields: [newsId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([newsId, tagId])
  @@index([tagId], map: "NewsTag_tagId_fkey")
}

model Page {
  id              Int      @id @default(autoincrement())
  slug            String   @unique
  title           String
  content         String   @db.LongText
  isVisible       Boolean  @default(true)
  customCss       String?  @db.LongText
  metaDescription String?  @db.Text
  metaKeywords    String?  @db.Text
  history         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  news      News[]
}

model MenuItem {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  link      String     @db.VarChar(255)
  mute      Boolean    @default(false)
  parentId  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    MenuItem?  @relation("MenuItemToParent", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToParent")

  @@index([parentId], map: "MenuItem_parentId_fkey")
}

model CarouselImage {
  id        Int      @id @default(autoincrement())
  url       String
  title     String?
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carouselImage")
}

model Treba {
  id                Int       @id @default(autoincrement())
  type              String
  names             String    @db.Text
  note              String?   @db.Text
  paymentStatus     String    @default("pending")
  paymentId         String?
  createdAt         DateTime  @default(now())
  email             String?
  period            String    @default("Разовое")
  updatedAt         DateTime  @updatedAt
  calculatedPrice   Float?
  currency          String?
  dynamicFieldsData Json?
  customDate        DateTime?
}

model TrebaFormField {
  id          Int       @id @default(autoincrement())
  fieldName   String    @unique
  fieldType   FieldType
  label       String
  options     Json?
  placeholder String?
  isRequired  Boolean   @default(false)
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TrebaPricingRule {
  id          Int       @id @default(autoincrement())
  periodValue String
  description String?
  price       Float
  priceType   PriceType
  currency    String    @default("RUB")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String

  @@unique([name, periodValue])
}

model CalendarDay {
  id          Int         @id @default(autoincrement())
  date        DateTime    @unique @db.Date
  priority    DayPriority @default(NORMAL)
  fastingType FastingType @default(NONE)
  isHoliday   Boolean     @default(false)
  color       String?
  note        String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  schedules   Schedule[]
  readings    Reading[]   @relation("CalendarDayToReading")
  saints      Saint[]     @relation("CalendarDayToSaint")

  @@map("calendar_days")
}

model Saint {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(500)
  description  String?       @db.Text
  icon         String?
  priority     SaintPriority @default(COMMEMORATED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  calendarDays CalendarDay[] @relation("CalendarDayToSaint")

  @@map("saints")
}

model Reading {
  id           Int           @id @default(autoincrement())
  type         ReadingType
  reference    String        @db.VarChar(255)
  title        String?       @db.VarChar(500)
  text         String?       @db.LongText
  order        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  calendarDays CalendarDay[] @relation("CalendarDayToReading")

  @@map("readings")
}

model Schedule {
  id            Int             @id @default(autoincrement())
  calendarDayId Int?
  date          DateTime        @db.Date
  time          String          @db.VarChar(10)
  title         String          @db.VarChar(255)
  description   String?         @db.Text
  type          ServiceType     @default(REGULAR)
  priority      ServicePriority @default(NORMAL)
  isVisible     Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  calendarDay   CalendarDay?    @relation(fields: [calendarDayId], references: [id])

  @@index([date])
  @@index([calendarDayId])
  @@map("schedules")
}

enum FieldType {
  TEXT
  TEXTAREA
  SELECT
  RADIO
  CHECKBOX
  NUMBER
}

enum PriceType {
  PER_NAME
  PER_TEN_NAMES
  FIXED
}

enum DayPriority {
  GREAT_FEAST
  TWELVE_FEAST
  POLYELEOS
  VIGIL
  SIXTH_CLASS
  NORMAL
}

enum FastingType {
  NONE
  STRICT
  FISH_ALLOWED
  WINE_OIL
  DRY_EATING
  FULL_FAST
}

enum SaintPriority {
  GREAT_SAINT
  POLYELEOS_SAINT
  VIGIL_SAINT
  SIXTH_CLASS
  COMMEMORATED
}

enum ReadingType {
  APOSTLE
  GOSPEL
  OLD_TESTAMENT
  PROKEIMENON
  ALLELUIA
}

enum ServiceType {
  REGULAR
  LITURGY
  VESPERS
  MATINS
  MOLEBEN
  PANIKHIDA
  AKATHIST
  SPECIAL
}

enum ServicePriority {
  HOLIDAY
  SPECIAL
  NORMAL
}

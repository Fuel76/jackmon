import React, { useState, useEffect } from 'react';
import './AdminBackups.css';

interface BackupFile {
  id: string;
  name: string;
  size: number;
  date: string;
  type: 'full' | 'partial';
  status: 'completed' | 'in_progress' | 'failed';
}

const AdminBackupsPage: React.FC = () => {
  const [backups, setBackups] = useState<BackupFile[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const [notification, setNotification] = useState<{ message: string; type: 'success' | 'error' } | null>(null);

  useEffect(() => {
    loadBackups();
  }, []);

  const loadBackups = async () => {
    setLoading(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const mockBackups: BackupFile[] = [
        {
          id: '1',
          name: 'backup_2024_01_15_full.zip',
          size: 156789432,
          date: '2024-01-15T10:30:00Z',
          type: 'full',
          status: 'completed'
        },
        {
          id: '2',
          name: 'backup_2024_01_14_partial.zip',
          size: 45123456,
          date: '2024-01-14T18:20:00Z',
          type: 'partial',
          status: 'completed'
        },
        {
          id: '3',
          name: 'backup_2024_01_13_full.zip',
          size: 178654321,
          date: '2024-01-13T02:15:00Z',
          type: 'full',
          status: 'completed'
        },
        {
          id: '4',
          name: 'backup_2024_01_12_partial.zip',
          size: 0,
          date: '2024-01-12T14:45:00Z',
          type: 'partial',
          status: 'failed'
        }
      ];
      
      setBackups(mockBackups);
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π', 'error');
    } finally {
      setLoading(false);
    }
  };

  const createBackup = async (type: 'full' | 'partial') => {
    setCreating(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const newBackup: BackupFile = {
        id: Date.now().toString(),
        name: `backup_${new Date().toISOString().split('T')[0]}_${type}.zip`,
        size: Math.floor(Math.random() * 200000000) + 50000000,
        date: new Date().toISOString(),
        type,
        status: 'completed'
      };
      
      setBackups(prev => [newBackup, ...prev]);
      showNotification('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'success');
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'error');
    } finally {
      setCreating(false);
    }
  };

  const downloadBackup = (backup: BackupFile) => {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const link = document.createElement('a');
    link.href = '#';
    link.download = backup.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showNotification('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å', 'success');
  };

  const deleteBackup = async (backupId: string) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é?')) {
      return;
    }

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      setBackups(prev => prev.filter(backup => backup.id !== backupId));
      showNotification('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞', 'success');
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'error');
    }
  };

  const showNotification = (message: string, type: 'success' | 'error') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return '‚úÖ';
      case 'in_progress':
        return '‚è≥';
      case 'failed':
        return '‚ùå';
      default:
        return '‚ùì';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'in_progress':
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case 'failed':
        return '–û—à–∏–±–∫–∞';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getTypeText = (type: string) => {
    return type === 'full' ? '–ü–æ–ª–Ω–∞—è' : '–ß–∞—Å—Ç–∏—á–Ω–∞—è';
  };

  return (
    <div className="admin-backups-page">
      <div className="admin-backups-header">
        <h1>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏</h1>
        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã</p>
      </div>

      <div className="backups-content">
        <div className="backup-actions">
          <div className="action-card">
            <div className="action-icon">üíæ</div>
            <div className="action-info">
              <h3>–ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</h3>
              <p>–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã</p>
            </div>
            <button 
              className="action-button primary"
              onClick={() => createBackup('full')}
              disabled={creating}
            >
              {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>

          <div className="action-card">
            <div className="action-icon">üìÅ</div>
            <div className="action-info">
              <h3>–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</h3>
              <p>–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
            <button 
              className="action-button secondary"
              onClick={() => createBackup('partial')}
              disabled={creating}
            >
              {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>
        </div>

        {creating && (
          <div className="backup-progress">
            <div className="progress-content">
              <div className="progress-spinner"></div>
              <div className="progress-text">
                <h4>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...</h4>
                <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</p>
              </div>
            </div>
          </div>
        )}

        <div className="backups-list">
          <div className="list-header">
            <h2>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏</h2>
            <div className="list-stats">
              –í—Å–µ–≥–æ: {backups.length} –∫–æ–ø–∏–π
            </div>
          </div>

          {loading ? (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...</span>
            </div>
          ) : backups.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">üì¶</div>
              <div className="empty-text">–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
              <div className="empty-hint">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é</div>
            </div>
          ) : (
            <div className="backup-grid">
              {backups.map(backup => (
                <div key={backup.id} className={`backup-item ${backup.status}`}>
                  <div className="backup-header">
                    <div className="backup-name">{backup.name}</div>
                    <div className={`backup-status ${backup.status}`}>
                      <span className="status-icon">{getStatusIcon(backup.status)}</span>
                      <span className="status-text">{getStatusText(backup.status)}</span>
                    </div>
                  </div>
                  
                  <div className="backup-details">
                    <div className="detail-item">
                      <span className="detail-label">–¢–∏–ø:</span>
                      <span className={`detail-value type-${backup.type}`}>
                        {getTypeText(backup.type)}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–†–∞–∑–º–µ—Ä:</span>
                      <span className="detail-value">{formatFileSize(backup.size)}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–î–∞—Ç–∞:</span>
                      <span className="detail-value">{formatDate(backup.date)}</span>
                    </div>
                  </div>

                  {backup.status === 'completed' && (
                    <div className="backup-actions">
                      <button 
                        className="action-btn download"
                        onClick={() => downloadBackup(backup)}
                        title="–°–∫–∞—á–∞—Ç—å"
                      >
                        ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å
                      </button>
                      <button 
                        className="action-btn delete"
                        onClick={() => deleteBackup(backup.id)}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {notification && (
        <div className={`notification ${notification.type}`}>
          {notification.message}
        </div>
      )}
    </div>
  );
};

export default AdminBackupsPage;
